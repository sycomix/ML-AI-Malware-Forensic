import pandas as pd
import sys
import re
import numpy as np

img_name=sys.argv[1]


#This function merges output from different volatility plugins
def mergefile():

    # Read psxview file generated from "img_name" memory image into dataframe
    data=pd.read_excel("psxview"+img_name+".xlsx",sheet_name="Sheet")
    #columns=['Offset (P)','Name', 'PID','pslist','psscan','thrdproc','pspcid','csrss','session','deskthrd']
             #'APIHOOK','EVENTHOOK','MALFIND','MSGHOOK']
    del data['Exit Time']
    # Initialize other columns for data frame
    data['APIHOOK']= np.nan
    data['EVENTHOOK']=np.nan
    data['MALFIND']=np.nan
    data['MSGHOOK']=np.nan

    data2=data.iloc[0:,0:14]
    # Final cleaning
    data2.replace([True,'Okay',False],[False,0,True], inplace=True)
    data2.replace([True,False],[int(True),int(False)], inplace=True)

    #print data2
        #data2[i] = (data2[i]).astype(int)
    #print data2
    return data2

    #data2['PID']=data2['PID'].str.strip()
    #print data
    #writer = pd.ExcelWriter(img_name+".xlsx", engine='xlsxwriter')
    #data2.to_excel(writer,sheet_name='Sheet')
    #print (data2)
    #return


#This function extracts features from malfind plugin output
def malfind(df):
    file_name="malfind"+img_name+ ".text"
    xfile_name=re.sub(r'text', r'xlsx', img_name+".text")
    with open(file_name) as s:

    	i=0
    	a=[]
    	for line in s:
    		if " Pid:" in line:
                            a.append(line.split()[3])


    c= list((set(a)))
    #b=list(map(int,b))
    b=[f for f in c if f.isdigit()]
    #print (b)
    #file_name="malfind.xlsx"
    #xl_workbook = pd.ExcelFile("psxview"+xfile_name+".xlsx")  # Load the excel workbook
    #df = xl_workbook.parse('psxview')  # Parse the sheet into a dataframe

    pl=list(df['PID'])
    #print len(pl)

#    print (pl)
    #print df
    o=0
    for j in pl:

    	row=df.loc[df['PID']==int(j)].index[0]
    	#print ("row is", row)
    #	row=df.loc[df['PID']==j]
    	#print(row)
    	col=df.columns.get_loc("MALFIND")
                                      # Mark the respective rows with 0
        df.iat[row,col]=0
        #print (df.iat[row,col],o)
        #o=o+1
    for i in b:
    	#	print(i)
    	row=df.loc[df['PID']==int(i)].index[0]
    	col=df.columns.get_loc("MALFIND")				# Mark the respective row of those infected process in xlsx file with 1
    	df.iat[row,col]=1
    df['MALFIND'] = df['MALFIND'].astype(int)

    return df
    #print(rl)
    #print(pl)

#    writer = pd.ExcelWriter("psxview"+xfile_name)


#    df.to_excel(writer,'Sheet')

#     writer.save()


# This function extracts features from apihook plugin output
def apihook(df):
    file_name="apihooks"+img_name+".text"
    #xfile_name=re.sub(r'text', r'xlsx', img_name+".text")


    with open(file_name) as s:

    	i=0
    	a=[]
    	for line in s:
    		if "Process" in line:
    			a.append(line.split()[1])
    		#	print(a[i])
    		#	print (i)
    		#	i=i+1				# Extract apihooked process ID's
    c= list((set(a)))
    b=[f for f in c if f.isdigit()]
    #b=str(b)
    print (b)
    #b=int(set(b))
#    file_name="psxview"+img_name
#    print (file_name)
#    xl_workbook = pd.ExcelFile("psxview"+xfile_name)  # Load the excel workbook
#    df = xl_workbook.parse('psxview')  # Parse the sheet into a dataframe
    pl=list(df['PID'])


    for j in pl:

    	row=df.loc[df['PID']==int(j)].index[0]
    	col=df.columns.get_loc("APIHOOK")                               # Mark the respective rows with 0
        df.iat[row,col]=0

    for i in b:
    	#	print(i)
    	row=df.loc[df['PID']==int(i)].index[0]
    	col=df.columns.get_loc("APIHOOK")				# Mark the respective row of those infected process in xlsx file with 1
    	df.iat[row,col]=1
    return df

def eventhook(df):
    file_name="eventhooks"+img_name+".text"
    #xfile_name=re.sub(r'text', r'xlsx', img_name)
    with open(file_name) as s:

    	i=0
    	a=[]
    	for line in s:
    		if " Process:" in line:
    			a.append(line.split()[-1])
    			#	if word=="Process":
    		#	a.append(word[(len(word)-1)])
    		#	print(a[i])
    		#	print (i)
    		#	i=i+1				# Extract apihooked process ID's
    #b= list((set(a)))
    #print (b)
    #file_name=".xlsx"
    #print("psxview"+xfile_name)
    #xl_workbook = pd.ExcelFile("psxview"+xfile_name)  # Load the excel workbook
    #df = xl_workbook.parse('psxview')  # Parse the sheet into a dataframe
    pl=list(df['PID'])


    for j in pl:

    	row=df.loc[df['PID']==int(j)].index[0]
    	col=df.columns.get_loc("EVENTHOOK")                               # Mark the respective rows with 0
        df.iat[row,col]=0


    #print (a)
    for i in a:
    	#	print(i)
    	row=df.loc[df['PID']==int(i)].index[0]
    	col=df.columns.get_loc("EVENTHOOK")				# Mark the respective row of those infected process in xlsx file with 1#
    	df.iat[row,col]=1


    return df


# This function extracts features from messagehook plugin
def messagehook(df):

    file_name="messagehooks"+img_name+".text"
    #xfile_name=re.sub(r'text', r'xlsx', img_name)
    with open(file_name) as s:

    	i=0
    	a=[]
    	for line in s:
    		for word in line.split():
    			if word.endswith(')'):
    				word=word[:-1]
    				a.append(word)
    	del a[0]
    #	print (a)
    	#	if "Process" in line:
    	#		a.append(line.split()[1])
    		#	print(a[i])
    		#	print (i)
    		#	i=i+1				# Extract apihooked process ID's
    #b= list((set(a)))
    #print (b)
    #file_name="msghooks.xlsx"
    #xl_workbook = pd.ExcelFile("psxview"+xfile_name)  # Load the excel workbook
    #df = xl_workbook.parse('psxview')  # Parse the sheet into a dataframe
    pl=list(df['PID'])


    for j in pl:

    	row=df.loc[df['PID']==int(j)].index[0]
    	col=df.columns.get_loc("MSGHOOK")                               # Mark the respective rows with 0
        df.iat[row,col]=0

    for i in a:
    	#	print(i)
    	if df['PID'].any()==int(i):
    		row=df.loc[df['PID']==int(i)].index[0]
    		col=df.columns.get_loc("MSGHOOK")				# Mark the respective row of those infected process in xlsx file with 1
    		df.iat[row,col]=1
    	else:
    		print ("No matching process")
    return df





def main():
    df=mergefile()
    df=malfind(df)
    df=apihook(df)
    df=eventhook(df)
    df=messagehook(df)
    df.to_csv("test_file",sep=",", encoding='utf8', index=False )
    print df




if __name__=="__main__":
    main()
